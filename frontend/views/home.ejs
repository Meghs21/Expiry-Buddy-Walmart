<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ExpiryBuddy - Save on Near-Expiry Products</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Pacifico&family=Roboto:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css"
    />
    <script src="https://cdn.tailwindcss.com/3.4.16"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: { primary: "#4CAF50", secondary: "#FFA726" },
            borderRadius: {
              none: "0px",
              sm: "4px",
              DEFAULT: "8px",
              md: "12px",
              lg: "16px",
              xl: "20px",
              "2xl": "24px",
              "3xl": "32px",
              full: "9999px",
              button: "8px",
            },
          },
        },
      };
    </script>
    <style>
      :where([class^="ri-"])::before { content: "\f3c2"; }
      body {
          font-family: 'Roboto', sans-serif;
          color: #333333;
          background-color: #F5F5F5;
      }
      h1, h2, h3, h4, h5, h6 {
          font-family: 'Inter', sans-serif;
      }
      .logo {
          font-family: 'Pacifico', serif;
      }
      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
          -webkit-appearance: none;
          margin: 0;
      }
      input[type="number"] {
          -moz-appearance: textfield;
      }
      .custom-checkbox {
          display: flex;
          align-items: center;
          cursor: pointer;
      }
      .custom-checkbox input {
          position: absolute;
          opacity: 0;
          cursor: pointer;
          height: 0;
          width: 0;
      }
      .checkmark {
          height: 20px;
          width: 20px;
          background-color: #fff;
          border: 2px solid #ddd;
          border-radius: 4px;
          display: flex;
          align-items: center;
          justify-content: center;
      }
      .custom-checkbox input:checked ~ .checkmark {
          background-color: #4CAF50;
          border-color: #4CAF50;
      }
      .checkmark:after {
          content: "";
          display: none;
      }
      .custom-checkbox input:checked ~ .checkmark:after {
          display: block;
          width: 5px;
          height: 10px;
          border: solid white;
          border-width: 0 2px 2px 0;
          transform: rotate(45deg);
          margin-bottom: 2px;
      }
      .custom-switch {
          position: relative;
          display: inline-block;
          width: 48px;
          height: 24px;
      }
      .custom-switch input {
          opacity: 0;
          width: 0;
          height: 0;
      }
      .switch-slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: #ccc;
          transition: .4s;
          border-radius: 24px;
      }
      .switch-slider:before {
          position: absolute;
          content: "";
          height: 18px;
          width: 18px;
          left: 3px;
          bottom: 3px;
          background-color: white;
          transition: .4s;
          border-radius: 50%;
      }
      input:checked + .switch-slider {
          background-color: #4CAF50;
      }
      input:checked + .switch-slider:before {
          transform: translateX(24px);
      }
      .custom-select {
          position: relative;
          display: inline-block;
          width: 100%;
      }
      .custom-select select {
          display: none;
      }
      .select-selected {
          background-color: white;
          border: 1px solid #e5e7eb;
          border-radius: 8px;
          padding: 10px 16px;
          cursor: pointer;
          display: flex;
          justify-content: space-between;
          align-items: center;
          transition: all 0.2s ease;
      }
       .select-selected:hover {
           border-color: #4CAF50;
           box-shadow: 0 0 0 1px rgba(76, 175, 80, 0.2);
       }
       .select-selected i {
           transition: transform 0.3s ease;
       }
       .select-selected.select-arrow-active i {
           transform: rotate(180deg);
      }
      .select-items {
          position: absolute;
          background-color: white;
          top: 100%;
          left: 0;
          right: 0;
          z-index: 99;
          border-radius: 8px;
          margin-top: 4px;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          max-height: 250px;
          overflow-y: auto;
          transition: opacity 0.3s ease, transform 0.3s ease;
      }
      .select-items div {
          padding: 10px 16px;
          cursor: pointer;
          transition: background-color 0.2s ease;

      }
      .select-items div:hover {
          background-color: rgba(76, 175, 80, 0.1);
      }
      .select-items div:active {
          background-color: rgba(76, 175, 80, 0.2);
      }
      .select-hide {
          display: none !important;
          opacity: 0;
          transform: translateY(-10px);
      }
      .same-as-selected {
          background-color: rgba(76, 175, 80, 0.1);
          font-weight: 500;
      }
      .range-slider {
          width: 100%;
          height: 5px;
          background: #ddd;
          border-radius: 5px;
          position: relative;
      }
      .range-selected {
          height: 100%;
          left: 0;
          right: 0;
          position: absolute;
          border-radius: 5px;
          background: #4CAF50;
      }
      .range-input {
          position: relative;
          height: 5px;
      }
      .range-input input {
          position: absolute;
          width: 100%;
          height: 5px;
          background: none;
          pointer-events: none;
          -webkit-appearance: none;
          -moz-appearance: none;
          appearance: none;
      }
      .range-input input::-webkit-slider-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          border: 3px solid #4CAF50;
          background: white;
          pointer-events: auto;
          -webkit-appearance: none;
          cursor: pointer;
      }
      .range-input input::-moz-range-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          border: 3px solid #4CAF50;
          background: white;
          pointer-events: auto;
          -moz-appearance: none;
          cursor: pointer;
      }
      
      /* Pagination and Slide Navigation Styles */
      #slide-prev, #slide-next {
          transition: all 0.3s ease;
          opacity: 0.7;
      }
      
      #slide-prev:hover, #slide-next:hover {
          opacity: 1;
          transform: translateY(-50%) scale(1.1);
      }
      
      #slide-prev:disabled, #slide-next:disabled {
          cursor: not-allowed;
      }
      
      #pagination-numbers {
          transition: all 0.3s ease;
      }
      
      #pagination-numbers button {
          transition: all 0.2s ease;
      }
      
      #pagination-numbers button:hover {
          transform: translateY(-2px);
      }
      
      #scroll-left, #scroll-right {
          transition: all 0.2s ease;
      }
      
      #scroll-left:hover, #scroll-right:hover {
          transform: scale(1.1);
      }
      
      /* User dropdown styles */
      .user-dropdown {
          transition: all 0.3s ease;
          transform-origin: top right;
          transform: scale(0.95);
          opacity: 0;
          visibility: hidden;
      }
      
      .group:hover .user-dropdown {
          transform: scale(1);
          opacity: 1;
          visibility: visible;
      }
    </style>
  </head>
  <body>
    <header class="bg-white shadow-sm sticky top-0 z-50">
      <div
        class="container mx-auto px-4 flex items-center justify-between h-16"
      >
        <div class="flex items-center">
          <a href="#" class="text-primary text-2xl font-['Pacifico'] mr-8"
            >ExpiryBuddy</a
          >
          <nav class="hidden md:flex space-x-6">
            <a href="/browse" class="text-primary font-medium">Browse</a>
            <a href="/browse" class="text-primary font-medium">Donations</a>
            <!-- <a href="/donations" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-opacity-90">Donations</a> -->
          </nav>
        </div>

        <div class="flex-1 max-w-md mx-4 hidden md:block">
          <div class="relative">
            <input
              type="text"
              placeholder="Search products, categories, or locations..."
              class="w-full py-2 pl-10 pr-4 border border-gray-300 rounded-button focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent text-sm"
            />
            <div
              class="absolute left-3 top-2.5 w-5 h-5 flex items-center justify-center text-gray-400"
            >
              <i class="ri-search-line"></i>
            </div>
          </div>
        </div>

        <div class="flex items-center space-x-4">
          <a href="/wishlist" 
            class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary rounded-full hover:bg-gray-100 relative"
          >
            <i class="ri-heart-line text-xl"></i>
            <% if (locals.wishlistCount && wishlistCount > 0) { %>
              <span class="absolute -top-1 -right-1 bg-primary text-white text-xs w-5 h-5 flex items-center justify-center rounded-full"><%= wishlistCount %></span>
            <% } %>
          </a>
          <a href="/cart" 
            class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary rounded-full hover:bg-gray-100 relative"
          >
            <i class="ri-shopping-cart-2-line text-xl"></i>
            <% if (locals.cartCount && cartCount > 0) { %>
              <span class="absolute -top-1 -right-1 bg-primary text-white text-xs w-5 h-5 flex items-center justify-center rounded-full"><%= cartCount %></span>
            <% } %>
          </a>
          <% if (locals.isLoggedIn && locals.user) { %>
            <div class="relative group">
              <button
                class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary rounded-full hover:bg-gray-100"
              >
                <i class="ri-user-line text-xl"></i>
              </button>
              <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50 user-dropdown">
                <div class="px-4 py-2 border-b border-gray-100">
                  <p class="font-medium text-gray-800"><%= user.fullName %></p>
                </div>
                <a href="/logout" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Logout</a>
              </div>
            </div>
          <% } else { %>
            <a href="/signup" 
              class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary rounded-full hover:bg-gray-100"
            >
              <i class="ri-user-line text-xl"></i>
            </a>
          <% } %>
          <button
            class="md:hidden w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary rounded-full hover:bg-gray-100"
          >
            <i class="ri-menu-line text-xl"></i>
          </button>
        </div>
      </div>

      <div class="md:hidden px-4 py-2 bg-white border-t border-gray-100">
        <div class="relative">
          <input
            type="text"
            placeholder="Search..."
            class="w-full py-2 pl-10 pr-4 border border-gray-300 rounded-button focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent text-sm"
          />
          <div
            class="absolute left-3 top-2.5 w-5 h-5 flex items-center justify-center text-gray-400"
          >
            <i class="ri-search-line"></i>
          </div>
        </div>
      </div>
    </header>

    <div class="bg-gradient-to-r from-green-50 to-green-100 py-8">
      <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row items-center justify-between">
          <div class="md:w-1/2 mb-8 md:mb-0">
            <h1 class="text-3xl md:text-4xl font-bold mb-4 text-gray-800">
              Save Money, Reduce Waste
            </h1>
            <p class="text-lg text-gray-600 mb-6">
              Find discounted near-expiry products from local retailers and help
              save the planet one purchase at a time.
            </p>
            <div class="flex flex-col sm:flex-row gap-4">
              <a href="/browse" class="bg-primary text-white px-6 py-3 rounded-button font-medium hover:bg-green-600 transition-colors whitespace-nowrap">
                Browse Products
            </a>
              <button
                class="bg-white text-primary border border-primary px-6 py-3 rounded-button font-medium hover:bg-green-50 transition-colors whitespace-nowrap"
              >
                For Retailers
              </button>
            </div>

            <div class="flex flex-wrap gap-6 mt-8">
              <div class="flex items-center">
                <div
                  class="w-12 h-12 flex items-center justify-center bg-green-100 rounded-full mr-3"
                >
                   <i class="ri-leaf-line text-primary text-xl"></i>
                 </div>
                 <div>
                   <p class="text-2xl font-bold text-primary" id="food-saved-counter">0 kg</p>
                   <p class="text-sm text-gray-600">Food saved</p>
                 </div>
               </div>

              <div class="flex items-center">
                <div
                  class="w-12 h-12 flex items-center justify-center bg-green-100 rounded-full mr-3"
                >
                  <i class="ri-store-2-line text-primary text-xl"></i>
                 </div>
                 <div>
                   <p class="text-2xl font-bold text-primary" id="retailers-counter">0</p>
                   <p class="text-sm text-gray-600">Local retailers</p>
                 </div>
               </div>

              <div class="flex items-center">
                <div
                  class="w-12 h-12 flex items-center justify-center bg-green-100 rounded-full mr-3"
                >
                  <i class="ri-hand-heart-line text-primary text-xl"></i>
                 </div>
                 <div>
                <p class="text-2xl font-bold text-primary" id="donations-counter">0</p>
                   <p class="text-sm text-gray-600">Donations made</p>
                 </div>
               </div>
               </div>
          </div>

          <div class="md:w-1/2 flex justify-center">
            <img
              src="https://readdy.ai/api/search-image?query=A%20modern%2C%20clean%20photo%20of%20a%20diverse%20array%20of%20grocery%20products%20with%20discount%20tags%20and%20expiry%20dates%20visible.%20The%20image%20shows%20fruits%2C%20vegetables%2C%20dairy%20products%2C%20and%20packaged%20goods%20arranged%20neatly%20with%20price%20tags%20showing%20original%20and%20discounted%20prices.%20The%20lighting%20is%20bright%20and%20professional%2C%20creating%20an%20appealing%20shopping%20atmosphere.&width=600&height=500&seq=1&orientation=landscape"
              alt="Discounted grocery products"
              class="rounded-lg shadow-lg max-w-full h-auto"
            />
          </div>
        </div>
      </div>
    </div>

    <div class="container mx-auto px-4 py-8">
      <div class="bg-white rounded-lg shadow-sm p-4 mb-8">
        <div class="flex flex-col md:flex-row md:items-center gap-4 flex-wrap">
          <div class="md:w-48">
            

            <div class="custom-select">
              <div class="select-selected">
                <span>All Categories</span>
                <i class="ri-arrow-down-s-line"></i>
              </div>
              <div class="select-items select-hide">
                <div>All Categories</div>
                <div>Food</div>
                <div>Beverages</div>
                <div>Dairy</div>
                <div>Bakery</div>
                <div>Personal Care</div>
                <div>Household</div>
              </div>
            </div>
          </div>

          <!-- Locations dropdown removed as requested -->

          <div class="flex-1 min-w-[200px]">
            <p class="text-sm text-gray-600 mb-1">
              Discount Range: <span id="discountValue">30% - 90%</span>
            </p>
            <div class="range-slider">
              <div class="range-selected"></div>
              <div class="range-input">
                <input
                  type="range"
                  min="0"
                  max="100"
                  value="30"
                  class="min-range"
                />
                <input
                  type="range"
                  min="0"
                  max="100"
                  value="90"
                  class="max-range"
                />
              </div>
            </div>
          </div>

          <div class="md:w-48">
            <div class="custom-select">
              <div class="select-selected">
                <span>Sort by: Expiry Date</span>
                <i class="ri-arrow-down-s-line"></i>
              </div>
              <div class="select-items select-hide">
                <div>Expiry Date</div>
                <div>Discount %</div>
                <div>Price (Low to High)</div>
                <div>Price (High to Low)</div>
              </div>
            </div>
          </div>

          <div class="flex items-center space-x-2">
            <button
              class="w-10 h-10 flex items-center justify-center bg-primary text-white rounded-button"
            >
              <i class="ri-layout-grid-line"></i>
            </button>
            <button
              class="w-10 h-10 flex items-center justify-center bg-gray-100 text-gray-600 rounded-button"
            >
              <i class="ri-list-check"></i>
            </button>
          </div>
        </div>
      </div>
      <!-- Product Count Display -->
      <div class="flex justify-between items-center mb-4">
        <p id="product-count" class="text-sm text-gray-600">Showing all products</p>
      </div>
      
      <!-- Pagination Controls -->
      <div class="flex justify-center mb-6">
        <div class="inline-flex items-center bg-white rounded-lg shadow-sm">
          <button id="prev-page" class="px-4 py-2 text-gray-600 hover:text-primary border-r border-gray-200">
            <i class="ri-arrow-left-s-line"></i>
          </button>
          
          <!-- Left Scroll Arrow (initially hidden) -->
          <button id="scroll-left" class="px-3 py-2 text-gray-600 hover:text-primary hidden">
            <i class="ri-arrow-left-line"></i>
          </button>
          
          <div id="pagination-numbers" class="flex overflow-hidden">
            <!-- Pagination numbers will be inserted here by JavaScript -->
          </div>
          
          <!-- Right Scroll Arrow (initially hidden) -->
          <button id="scroll-right" class="px-3 py-2 text-gray-600 hover:text-primary hidden">
            <i class="ri-arrow-right-line"></i>
          </button>
          
          <button id="next-page" class="px-4 py-2 text-gray-600 hover:text-primary border-l border-gray-200">
            <i class="ri-arrow-right-s-line"></i>
          </button>
        </div>
      </div>

      <!-- Product Grid with Side Arrows -->
      <div class="relative">
        <!-- Left Arrow -->
        <button id="slide-prev" class="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-white rounded-full shadow-md w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary hover:shadow-lg focus:outline-none">
          <i class="ri-arrow-left-s-line text-xl"></i>
        </button>
        
        <!-- Product Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 p-4 px-12">
          <% 
          // Load all products into the DOM but only show first 6 initially
          products.forEach((product, i) => { 
            const isVisible = i < 6; // Only first 6 are visible initially
          %>
              <div class="bg-white rounded-lg shadow-md p-4 product-item <%= isVisible ? '' : 'hidden' %>" data-index="<%= i %>">
              <img src="<%= product.imageUrl %>" alt="<%= product.name %>" class="w-full h-48 object-cover rounded" />
              <h2 class="text-xl font-bold mt-2"><%= product.name %></h2>
              <p class="text-gray-700"><%= product.category %> | <%= product.location %></p>
              <p class="mt-1 text-sm">Expires: <%= new Date(product.expiryDate).toLocaleDateString() %></p>
              <p class="text-green-600 font-semibold mt-1">₹<%= product.finalPrice || product.price %></p>
              <p class="text-sm text-gray-500">Discount: <%= product.discount %>%</p>
            </div>
          <% }); %>
        </div>
        
        <!-- Right Arrow -->
        <button id="slide-next" class="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-white rounded-full shadow-md w-10 h-10 flex items-center justify-center text-gray-600 hover:text-primary hover:shadow-lg focus:outline-none">
          <i class="ri-arrow-right-s-line text-xl"></i>
        </button>
      </div>
      </div>


    <section class="py-16 bg-green-50">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center mb-12">
          <h2 class="text-3xl font-bold mb-4">Our Impact</h2>
          <p class="text-gray-600">
            Together, we're making a difference in reducing food waste and
            helping communities.
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div class="bg-white p-6 rounded-lg shadow-sm text-center">
            <div class="text-4xl font-bold text-primary mb-2">0 kg</div>
            <p class="text-gray-600">Food Saved</p>
          </div>

          <div class="bg-white p-6 rounded-lg shadow-sm text-center">
            <div class="text-4xl font-bold text-primary mb-2">Rs 0</div>
            <p class="text-gray-600">Customer Savings</p>
          </div>

          <div class="bg-white p-6 rounded-lg shadow-sm text-center">
            <div class="text-4xl font-bold text-primary mb-2">0</div>
            <p class="text-gray-600">Donations Made</p>
          </div>

          <div class="bg-white p-6 rounded-lg shadow-sm text-center">
            <div class="text-4xl font-bold text-primary mb-2">0+</div>
            <p class="text-gray-600">Participating Retailers</p>
          </div>
        </div>

        <div class="mt-12 bg-white p-6 rounded-lg shadow-sm hidden">
  <!-- ...content... -->
</div>
    </section>

    <section class="py-16 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center mb-12">
          <h2 class="text-3xl font-bold mb-4">What Our Users Say</h2>
          <p class="text-gray-600">
            Join thousands of satisfied customers and retailers who are making a
            difference.
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="bg-gray-50 p-6 rounded-lg">
            <div class="flex items-center mb-4">
              <div class="text-yellow-400 flex">
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
              </div>
            </div>
            <p class="text-gray-600 mb-4">
                "We built ExpiryBuddy to help people save serious money on groceries while also reducing food waste. Seeing users save over $200 in just a month? That’s exactly why we do what we do. Quality products + good vibes + saving the planet = win-win."

            </p>
            <div class="flex items-center">
              <div
                class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3"
              >
                <i class="ri-user-line text-primary"></i>
              </div>
              <div>
                <p class="font-medium">Team ExpiryBuddy</p>
                <p class="text-sm text-gray-500">Web developers</p>
              </div>
            </div>
          </div>
        </div>
          
      </div>
    </section>

    <section class="py-16 bg-green-50">
      <div class="container mx-auto px-4 text-center">
        <h2 class="text-3xl font-bold mb-4">Join Our Newsletter</h2>
        <p class="text-gray-600 mb-8 max-w-2xl mx-auto">
          Stay updated with the latest deals, tips on reducing waste, and news
          about our environmental impact.
        </p>

        <div class="max-w-md mx-auto flex">
          <input
            type="email"
            placeholder="Your email address"
            class="flex-1 px-4 py-3 rounded-l-button border-none focus:outline-none focus:ring-2 focus:ring-primary"
          />
          <button
            class="bg-primary text-white px-6 py-3 rounded-r-button font-medium hover:bg-green-600 transition-colors whitespace-nowrap"
          >
            Subscribe
          </button>
        </div>
      </div>
    </section>

    <footer class="bg-gray-800 text-white pt-12 pb-6">
      <div class="container mx-auto px-4">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <div>
            <h3 class="text-xl font-['Pacifico'] mb-4">ExpiryBuddy</h3>
            <p class="text-gray-400 mb-4">
              Helping you save money while reducing food waste in your
              community.
            </p>
            <div class="flex space-x-4">
              <a href="#" class="text-gray-400 hover:text-white">
                <div class="w-8 h-8 flex items-center justify-center">
                  <i class="ri-facebook-fill"></i>
                </div>
              </a>
              <a href="#" class="text-gray-400 hover:text-white">
                <div class="w-8 h-8 flex items-center justify-center">
                  <i class="ri-twitter-fill"></i>
                </div>
              </a>
              <a href="#" class="text-gray-400 hover:text-white">
                <div class="w-8 h-8 flex items-center justify-center">
                  <i class="ri-instagram-fill"></i>
                </div>
              </a>
              <a href="#" class="text-gray-400 hover:text-white">
                <div class="w-8 h-8 flex items-center justify-center">
                  <i class="ri-linkedin-fill"></i>
                </div>
              </a>
            </div>
          </div>

          <div>
            <h4 class="text-lg font-bold mb-4">Quick Links</h4>
            <ul class="space-y-2">
              <li>
                <a href="#" class="text-gray-400 hover:text-white">Home</a>
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >Browse Products</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >Upload Products</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white">Donations</a>
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >Our Impact</a
                >
              </li>
            </ul>
          </div>

          <div>
            <h4 class="text-lg font-bold mb-4">For Users</h4>
            <ul class="space-y-2">
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >How It Works</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >Create Account</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >For Retailers</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white"
                  >For Shelters</a
                >
              </li>
              <li>
                <a href="#" class="text-gray-400 hover:text-white">FAQs</a>
              </li>
            </ul>
          </div>

          <div>
            <h4 class="text-lg font-bold mb-4">Contact Us</h4>
            <ul class="space-y-2">
              <li class="flex items-center">
                <div
                  class="w-5 h-5 flex items-center justify-center mr-2 text-gray-400"
                >
                  <i class="ri-mail-line"></i>
                </div>
                <a
                  href="mailto:info@expirybuddy.com"
                  class="text-gray-400 hover:text-white"
                  >info@expirybuddy.com</a
                >
              </li>
              <li class="flex items-center">
                <div
                  class="w-5 h-5 flex items-center justify-center mr-2 text-gray-400"
                >
                  <i class="ri-phone-line"></i>
                </div>
                <a href="tel:+1234567890" class="text-gray-400 hover:text-white"
                  >+1 (234) 567-890</a
                >
              </li>
              <li class="flex items-center">
                <div
                  class="w-5 h-5 flex items-center justify-center mr-2 text-gray-400"
                >
                  <i class="ri-map-pin-line"></i>
                </div>
                <span class="text-gray-400"
                  >123 Green Street, Anytown, USA</span
                >
              </li>
            </ul>
          </div>
        </div>

        <div
          class="border-t border-gray-700 pt-6 flex flex-col md:flex-row justify-between items-center"
        >
          <p class="text-gray-400 text-sm mb-4 md:mb-0">
            &copy; 2025 ExpiryBuddy. All rights reserved.
          </p>

          <div class="flex flex-wrap justify-center gap-4">
            <a href="#" class="text-gray-400 hover:text-white text-sm"
              >Privacy Policy</a
            >
            <a href="#" class="text-gray-400 hover:text-white text-sm"
              >Terms of Service</a
            >
            <a href="#" class="text-gray-400 hover:text-white text-sm"
              >Cookie Policy</a
            >
          </div>

          <div class="flex items-center mt-4 md:mt-0">
            <div class="flex space-x-3">
              <div class="w-8 h-5 flex items-center justify-center">
                <i class="ri-visa-fill text-gray-400 text-xl"></i>
              </div>
              <div class="w-8 h-5 flex items-center justify-center">
                <i class="ri-mastercard-fill text-gray-400 text-xl"></i>
              </div>
              <div class="w-8 h-5 flex items-center justify-center">
                <i class="ri-paypal-fill text-gray-400 text-xl"></i>
              </div>
              <div class="w-8 h-5 flex items-center justify-center">
                <i class="ri-apple-fill text-gray-400 text-xl"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </footer>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.5.0/echarts.min.js"></script>

    <script id="custom-select-script">
      document.addEventListener("DOMContentLoaded", function () {
        // Initialize all custom select elements
        const customSelects = document.querySelectorAll(".custom-select");
        
        customSelects.forEach((select) => {
          const selectedDiv = select.querySelector(".select-selected");
          const itemsDiv = select.querySelector(".select-items");
          const items = itemsDiv.querySelectorAll("div");
          
          // Set the first option as selected by default
          if (items.length > 0) {
            items[0].classList.add("same-as-selected");
          }
          
          // Toggle dropdown when clicking the select header
          selectedDiv.addEventListener("click", function (e) {
            e.stopPropagation();
            
            // Close any other open dropdowns
            closeAllSelect(this);
            
            // Toggle this dropdown
            itemsDiv.classList.toggle("select-hide");
            
            // Add visual indicator for open state
            this.classList.toggle("select-arrow-active");
            
            // Add animation
            if (!itemsDiv.classList.contains("select-hide")) {
              itemsDiv.style.display = "block";
              itemsDiv.style.opacity = "0";
              itemsDiv.style.transform = "translateY(-10px)";
              setTimeout(() => {
                itemsDiv.style.opacity = "1";
                itemsDiv.style.transform = "translateY(0)";
              }, 10);
            }
          });
          
          // Handle option selection
          items.forEach((item) => {
            item.addEventListener("click", function (e) {
              e.stopPropagation();
              
              // Update the selected text
              const selectedSpan = selectedDiv.querySelector("span");
              selectedSpan.textContent = this.textContent;
              
              // Update the selected styling
              const sameAsSelected = itemsDiv.querySelector(".same-as-selected");
              if (sameAsSelected) {
                sameAsSelected.classList.remove("same-as-selected");
              }
              this.classList.add("same-as-selected");
              
              // Trigger a custom event for category change
              const event = new CustomEvent("categoryChanged", {
                detail: { category: this.textContent }
              });
              select.dispatchEvent(event);
              
              // Close the dropdown
              itemsDiv.classList.add("select-hide");
              selectedDiv.classList.remove("select-arrow-active");
            });
          });
        });
        
        // Function to close all select dropdowns except the current one
        function closeAllSelect(elmnt) {
          const items = document.querySelectorAll(".select-items");
          const selected = document.querySelectorAll(".select-selected");
          
          items.forEach((item, idx) => {
            if (elmnt !== selected[idx]) {
              item.classList.add("select-hide");
              selected[idx].classList.remove("select-arrow-active");
            }
          });
        }
        
        // Close all dropdowns when clicking outside
        document.addEventListener("click", closeAllSelect);
        
        // Listen for category changes
        const categorySelect = document.querySelector(".custom-select");
        if (categorySelect) {
          categorySelect.addEventListener("categoryChanged", function(e) {
            console.log("Category changed to:", e.detail.category);
            // You can add filtering logic here based on the selected category
          });
        }
      });
    </script>

    <script id="range-slider-script">
      document.addEventListener("DOMContentLoaded", function () {
        const minRange = document.querySelector(".min-range");
        const maxRange = document.querySelector(".max-range");
        const rangeSelected = document.querySelector(".range-selected");
        const discountValue = document.getElementById("discountValue");

        function updateRangeValues() {
          const minVal = parseInt(minRange.value);
          const maxVal = parseInt(maxRange.value);

          if (minVal > maxVal) {
            minRange.value = maxVal;
            return;
          }

          const leftPercent = (minVal / minRange.max) * 100;
          const rightPercent = 100 - (maxVal / maxRange.max) * 100;

          rangeSelected.style.left = leftPercent + "%";
          rangeSelected.style.right = rightPercent + "%";

          discountValue.textContent = minVal + "% - " + maxVal + "%";
        }

        minRange.addEventListener("input", updateRangeValues);
        maxRange.addEventListener("input", updateRangeValues);

        updateRangeValues();
      });
    </script>
    <script id="form-submission-script">
      document.addEventListener("DOMContentLoaded", function () {
        const productForm = document.getElementById("product-upload-form");

        if (productForm) {
          productForm.addEventListener("submit", function (e) {
            e.preventDefault();

            // Simulate form submission
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;

            submitButton.textContent = "Uploading...";
            submitButton.disabled = true;

            // Simulate API call
            setTimeout(() => {
              // Reset form
              productForm.reset();

              // Show success message
              const successMessage = document.createElement("div");
              successMessage.className =
                "bg-green-100 text-primary p-3 rounded-lg mt-4";
              successMessage.textContent = "Product uploaded successfully!";

              productForm.appendChild(successMessage);

              // Reset button
              submitButton.textContent = originalText;
              submitButton.disabled = false;

              // Remove success message after 3 seconds
              setTimeout(() => {
                successMessage.remove();
              }, 3000);
            }, 1500);
          });
        }
      });
    </script>

    <script id="impact-chart-script">
      document.addEventListener("DOMContentLoaded", function () {
        const chartContainer = document.getElementById("impact-chart");

        if (chartContainer) {
          const chart = echarts.init(chartContainer);

          const option = {
            animation: false,
            tooltip: {
              trigger: "axis",
              backgroundColor: "rgba(255, 255, 255, 0.8)",
              textStyle: {
                color: "#1f2937",
              },
            },
            legend: {
              data: [
                "Food Saved (kg)",
                "CO₂ Emissions Reduced (kg)",
                "Water Saved (L)",
              ],
              textStyle: {
                color: "#1f2937",
              },
            },
            grid: {
              left: 0,
              right: 0,
              top: 30,
              bottom: 0,
              containLabel: true,
            },
            xAxis: {
              type: "category",
              data: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
              axisLabel: {
                color: "#1f2937",
              },
            },
            yAxis: {
              type: "value",
              axisLabel: {
                color: "#1f2937",
              },
            },
            series: [
              {
                name: "Food Saved (kg)",
                type: "line",
                smooth: true,
                data: [120, 180, 240, 320, 390, 450],
                itemStyle: {
                  color: "rgba(87, 181, 231, 1)",
                },
                lineStyle: {
                  width: 3,
                },
                areaStyle: {
                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {
                      offset: 0,
                      color: "rgba(87, 181, 231, 0.3)",
                    },
                    {
                      offset: 1,
                      color: "rgba(87, 181, 231, 0.1)",
                    },
                  ]),
                },
                showSymbol: false,
              },
              {
                name: "CO₂ Emissions Reduced (kg)",
                type: "line",
                smooth: true,
                data: [80, 120, 160, 210, 260, 300],
                itemStyle: {
                  color: "rgba(141, 211, 199, 1)",
                },
                lineStyle: {
                  width: 3,
                },
                areaStyle: {
                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {
                      offset: 0,
                      color: "rgba(141, 211, 199, 0.3)",
                    },
                    {
                      offset: 1,
                      color: "rgba(141, 211, 199, 0.1)",
                    },
                  ]),
                },
                showSymbol: false,
              },
              {
                name: "Water Saved (L)",
                type: "line",
                smooth: true,
                data: [300, 450, 600, 750, 900, 1050],
                itemStyle: {
                  color: "rgba(251, 191, 114, 1)",
                },
                lineStyle: {
                  width: 3,
                },
                areaStyle: {
                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                    {
                      offset: 0,
                      color: "rgba(251, 191, 114, 0.3)",
                    },
                    {
                      offset: 1,
                      color: "rgba(251, 191, 114, 0.1)",
                    },
                  ]),
                },
                showSymbol: false,
              },
            ],
          };

          chart.setOption(option);

          window.addEventListener("resize", function () {
            chart.resize();
          });
        }
      });
    </script>

    <script id="mobile-menu-script">
      document.addEventListener("DOMContentLoaded", function () {
        const menuButton = document.querySelector(".ri-menu-line").parentElement;

        if (menuButton) {
          menuButton.addEventListener("click", function () {
            const mobileMenu = document.createElement("div");
            mobileMenu.className =
              "fixed inset-0 bg-gray-800 bg-opacity-90 z-50 flex flex-col";

            const header = document.createElement("div");
            header.className =
              "flex justify-between items-center p-4 border-b border-gray-700";

            const logo = document.createElement("div");
            logo.className = "text-primary text-2xl font-['Pacifico']";
            logo.textContent = "ExpiryBuddy";

            const closeButton = document.createElement("button");
            closeButton.className = "text-white text-2xl";
            closeButton.innerHTML = '<i class="ri-close-line"></i>';

            header.appendChild(logo);
            header.appendChild(closeButton);

            const nav = document.createElement("nav");
            nav.className = "flex-1 overflow-y-auto p-4";

            const links = [
              { text: "Browse", active: true },
              { text: "Upload", active: false },
              { text: "Donations", active: false },
              { text: "How It Works", active: false },
              { text: "Our Impact", active: false },
              { text: "Contact Us", active: false },
            ];

            const ul = document.createElement("ul");
            ul.className = "space-y-4";

            links.forEach((link) => {
              const li = document.createElement("li");
              const a = document.createElement("a");
              a.href = "#";
              a.className = link.active
                ? "text-primary text-xl font-medium block py-2"
                : "text-white text-xl font-medium block py-2";
              a.textContent = link.text;

              li.appendChild(a);
              ul.appendChild(li);
            });

            nav.appendChild(ul);

            mobileMenu.appendChild(header);
            mobileMenu.appendChild(nav);

            document.body.appendChild(mobileMenu);
            document.body.style.overflow = "hidden";

            closeButton.addEventListener("click", function () {
              document.body.removeChild(mobileMenu);
              document.body.style.overflow = "";
            });
          });
        }
      });
    </script>

    <script id="product-sorting-script">
      document.addEventListener("DOMContentLoaded", function () {
        // Get the sort dropdown - find the one with "Sort by" text
        const allSelects = document.querySelectorAll('.custom-select');
        let sortSelect = null;
        let categorySelect = null;
        
        // Find the sort and category dropdowns
        allSelects.forEach(select => {
          const span = select.querySelector('.select-selected span');
          if (span) {
            if (span.textContent.includes('Sort by')) {
              sortSelect = select;
            } else if (span.textContent.includes('All Categories')) {
              categorySelect = select;
            }
          }
        });
        
        // Get all products
        const productGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.md\\:grid-cols-3');
        const allProductItems = Array.from(document.querySelectorAll('.product-item'));
        
        // Current filter and sort settings
        let currentSortBy = 'Expiry Date';
        let currentCategory = 'All Categories';
        
        // Function to extract product data for sorting and filtering
        function extractProductData(productElement) {
          // Get expiry date
          const expiryDateElement = productElement.querySelector('p.mt-1.text-sm');
          const expiryDateText = expiryDateElement ? expiryDateElement.textContent.replace('Expires: ', '') : '';
          const expiryDate = new Date(expiryDateText);
          
          // Get price
          const priceElement = productElement.querySelector('p.text-green-600.font-semibold');
          const priceText = priceElement ? priceElement.textContent : '0';
          const price = parseFloat(priceText.replace('₹', '')) || 0;
          
          // Get discount
          const discountElement = productElement.querySelector('p.text-sm.text-gray-500');
          const discountText = discountElement ? discountElement.textContent : '0%';
          const discount = parseInt(discountText.replace('Discount: ', '').replace('%', '')) || 0;
          
          // Get category
          const categoryElement = productElement.querySelector('p.text-gray-700');
          const categoryText = categoryElement ? categoryElement.textContent : '';
          const category = categoryText.split('|')[0].trim();
          
          return {
            element: productElement,
            expiryDate,
            price,
            discount,
            category
          };
        }
        
        // Function to filter and sort products
        function filterAndSortProducts() {
          // Extract product data for sorting and filtering
          const productsWithData = allProductItems.map(extractProductData);
          
          // Filter by category if needed
          const filteredProducts = currentCategory === 'All Categories' 
            ? productsWithData 
            : productsWithData.filter(product => product.category === currentCategory);
          
          // Sort based on criteria
          switch(currentSortBy) {
            case 'Expiry Date':
              // Sort by expiry date (closest expiry first)
              filteredProducts.sort((a, b) => {
                // Handle invalid dates
                if (isNaN(a.expiryDate.getTime()) && isNaN(b.expiryDate.getTime())) return 0;
                if (isNaN(a.expiryDate.getTime())) return 1;
                if (isNaN(b.expiryDate.getTime())) return -1;
                
                return a.expiryDate - b.expiryDate;
              });
              break;
            case 'Discount %':
              filteredProducts.sort((a, b) => b.discount - a.discount);
              break;
            case 'Price (Low to High)':
              filteredProducts.sort((a, b) => a.price - b.price);
              break;
            case 'Price (High to Low)':
              filteredProducts.sort((a, b) => b.price - a.price);
              break;
            default:
              // Default to expiry date
              filteredProducts.sort((a, b) => {
                if (isNaN(a.expiryDate.getTime()) && isNaN(b.expiryDate.getTime())) return 0;
                if (isNaN(a.expiryDate.getTime())) return 1;
                if (isNaN(b.expiryDate.getTime())) return -1;
                
                return a.expiryDate - b.expiryDate;
              });
          }
          
          // Hide all products first
          allProductItems.forEach(product => {
            product.style.display = 'none';
          });
          
          // Show only filtered products
          filteredProducts.forEach(product => {
            product.element.style.display = 'block';
          });
          
          // Reset pagination to first page and update it based on filtered products
          if (typeof updatePagination === 'function') {
            updatePagination(filteredProducts.map(p => p.element));
          } else if (typeof goToPage === 'function') {
            goToPage(1);
          }
          
          // Update product count display
          const countElement = document.getElementById('product-count');
          if (countElement) {
            countElement.textContent = `Showing ${filteredProducts.length} of ${allProductItems.length} products`;
          }
        }
        
        // Add event listener for sort changes
        if (sortSelect) {
          sortSelect.addEventListener('categoryChanged', function(e) {
            currentSortBy = e.detail.category;
            filterAndSortProducts();
          });
        }
        
        // Add event listener for category changes
        if (categorySelect) {
          categorySelect.addEventListener('categoryChanged', function(e) {
            currentCategory = e.detail.category;
            filterAndSortProducts();
          });
        }
        
        // Initial sort by expiry date
        filterAndSortProducts();
      });
    </script>

    <script id="pagination-script">
      document.addEventListener("DOMContentLoaded", function () {
        // Pagination configuration
        const productsPerPage = 6;
        let currentPage = 1;
        
        // Get all products (they're already in the DOM but hidden)
        let allProducts = Array.from(document.querySelectorAll('.product-item'));
        let visibleProducts = [...allProducts]; // Products after filtering
        let totalProducts = allProducts.length;
        let totalPages = Math.ceil(totalProducts / productsPerPage);
        
        // Get pagination elements
        const paginationNumbers = document.getElementById('pagination-numbers');
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        const scrollLeftButton = document.getElementById('scroll-left');
        const scrollRightButton = document.getElementById('scroll-right');
        
        // Get slide navigation buttons
        const slidePrevButton = document.getElementById('slide-prev');
        const slideNextButton = document.getElementById('slide-next');
        
        // Maximum number of page buttons to show at once
        const maxVisibleButtons = 5;
        
        // Function to update pagination based on filtered products
        function updatePagination(filteredProducts) {
          visibleProducts = filteredProducts;
          totalProducts = visibleProducts.length;
          totalPages = Math.ceil(totalProducts / productsPerPage);
          
          // Reset to first page when filters change
          currentPage = 1;
          
          // Update pagination UI
          createPaginationNumbers();
          showProductsForPage(1);
          updateButtonStates();
        }
        
        // Initialize pagination
        function initPagination() {
          // Create pagination numbers
          createPaginationNumbers();
          
          // Show products for the first page
          showProductsForPage(1);
          
          // Add event listeners for pagination
          prevButton.addEventListener('click', goToPreviousPage);
          nextButton.addEventListener('click', goToNextPage);
          scrollLeftButton.addEventListener('click', scrollPaginationLeft);
          scrollRightButton.addEventListener('click', scrollPaginationRight);
          
          // Add event listeners for slide navigation
          slidePrevButton.addEventListener('click', goToPreviousPage);
          slideNextButton.addEventListener('click', goToNextPage);
          
          // Update button states
          updateButtonStates();
        }
        
        // Create pagination number buttons
        function createPaginationNumbers() {
          paginationNumbers.innerHTML = '';
          
          // Handle case with no visible products
          if (totalPages === 0) {
            scrollLeftButton.style.display = 'none';
            scrollRightButton.style.display = 'none';
            return;
          }
          
          // Determine which page numbers to show
          let startPage = Math.max(1, currentPage - Math.floor(maxVisibleButtons / 2));
          let endPage = Math.min(totalPages, startPage + maxVisibleButtons - 1);
          
          // Adjust start page if we're near the end
          if (endPage - startPage + 1 < maxVisibleButtons) {
            startPage = Math.max(1, endPage - maxVisibleButtons + 1);
          }
          
          // Show/hide scroll arrows based on whether there are hidden pages
          scrollLeftButton.style.display = startPage > 1 ? 'block' : 'none';
          scrollRightButton.style.display = endPage < totalPages ? 'block' : 'none';
          
          // Create page buttons
          for (let i = startPage; i <= endPage; i++) {
            addPageButton(i);
          }
        }
        
        // Add a page number button
        function addPageButton(pageNum) {
          const button = document.createElement('button');
          button.className = 'px-4 py-2 ' + 
                            (pageNum === currentPage 
                              ? 'bg-primary text-white' 
                              : 'text-gray-600 hover:text-primary');
          button.textContent = pageNum;
          button.addEventListener('click', () => goToPage(pageNum));
          paginationNumbers.appendChild(button);
        }
        
        // Scroll pagination left (show earlier page numbers)
        function scrollPaginationLeft() {
          const newPage = Math.max(1, currentPage - maxVisibleButtons);
          goToPage(newPage);
        }
        
        // Scroll pagination right (show later page numbers)
        function scrollPaginationRight() {
          const newPage = Math.min(totalPages, currentPage + maxVisibleButtons);
          goToPage(newPage);
        }
        
        // Show products for the specified page
        function showProductsForPage(pageNum) {
          // Hide all products first
          allProducts.forEach(product => {
            product.style.display = 'none';
          });
          
          // If no products to show, return
          if (visibleProducts.length === 0) {
            return;
          }
          
          // Calculate start and end indices
          const startIndex = (pageNum - 1) * productsPerPage;
          const endIndex = Math.min(startIndex + productsPerPage, totalProducts);
          
          // Show products for current page
          for (let i = startIndex; i < endIndex; i++) {
            if (visibleProducts[i]) {
              visibleProducts[i].style.display = 'block';
            }
          }
        }
        
        // Go to a specific page
        function goToPage(pageNum) {
          // Ensure page number is valid
          if (pageNum < 1 || pageNum > totalPages || totalPages === 0) {
            return;
          }
          
          currentPage = pageNum;
          showProductsForPage(currentPage);
          createPaginationNumbers();
          updateButtonStates();
          
          // Scroll to top of product section for better UX
          const productSection = document.querySelector('.product-item')?.closest('.relative');
          if (productSection) {
            productSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
        }
        
        // Go to previous page
        function goToPreviousPage() {
          if (currentPage > 1) {
            goToPage(currentPage - 1);
          }
        }
        
        // Go to next page
        function goToNextPage() {
          if (currentPage < totalPages) {
            goToPage(currentPage + 1);
          }
        }
        
        // Update button states
        function updateButtonStates() {
          // Handle case with no pages
          if (totalPages === 0) {
            prevButton.disabled = true;
            nextButton.disabled = true;
            slidePrevButton.disabled = true;
            slideNextButton.disabled = true;
            
            prevButton.style.opacity = '0.5';
            nextButton.style.opacity = '0.5';
            slidePrevButton.style.opacity = '0.5';
            slideNextButton.style.opacity = '0.5';
            return;
          }
          
          // Update pagination navigation buttons
          prevButton.disabled = currentPage === 1;
          prevButton.style.opacity = currentPage === 1 ? '0.5' : '1';
          
          nextButton.disabled = currentPage === totalPages;
          nextButton.style.opacity = currentPage === totalPages ? '0.5' : '1';
          
          // Update slide navigation buttons
          slidePrevButton.disabled = currentPage === 1;
          slidePrevButton.style.opacity = currentPage === 1 ? '0.5' : '1';
          
          slideNextButton.disabled = currentPage === totalPages;
          slideNextButton.style.opacity = currentPage === totalPages ? '0.5' : '1';
        }
        
        // Make functions globally available for the sorting script
        window.goToPage = goToPage;
        window.updatePagination = updatePagination;
        
        // Initialize pagination
        initPagination();
      });
    </script>
  </body>
</html>